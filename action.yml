name: Plugin Build
description: Build the plugin and create a zip file.

inputs:
  PACKAGE_VERSION:
    required: false
    description: 'Optional. The version of the package to use.'
    default: ""
  DEPLOY_BUILDS_ENDPOINT:
    required: false
    description: 'The endpoint to deploy the builds to.'
    default: ""
  ELEMENTOR_PRO_CORE_BRANCH:
    required: false
    description: 'The branch of the core repository to use.'
    default: "main"

outputs:
  artifact_name:
    description: "The name of the generated zip file."
    value: ${{ steps.build_plugin.outputs.PLUGIN_FILENAME }}

runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        npm ci
        composer install --optimize-autoloader --prefer-dist
        composer install --no-scripts --no-dev
        composer dump-autoload

    - name: Set GitHub Repository Name Environment Variable
      shell: bash
      run: |
        REPOSITORY_NAME=$(echo "${{ github.repository }}" | awk -F/ '{print $NF}')

        echo "REPOSITORY_NAME=${REPOSITORY_NAME}" >> $GITHUB_ENV

    - name: Set Package Version Environment Variable
      shell: bash
      run: |
        if [ -z "${{ inputs.PACKAGE_VERSION }}" ]; then

          DATE_VERSION=$(date '+%Y%m%d.%H%M')
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          BUILD_PACKAGE_VERSION=${PACKAGE_VERSION}-${DATE_VERSION}

          if [ "${{ env.REPOSITORY_NAME }}" == "elementor-pro" ]; then
            ELEMENTOR_VERSION_DEPENDENCY=$(node -p "require('./package.json').elementor_version_dependency")
            ELEMENTOR_VERSION_RECOMMENDATION=$(node -p "require('./package.json').elementor_version_recommendation")

            echo "ELEMENTOR_VERSION_DEPENDENCY=${ELEMENTOR_VERSION_DEPENDENCY}" >> $GITHUB_ENV
            echo "ELEMENTOR_VERSION_RECOMMENDATION=${ELEMENTOR_VERSION_RECOMMENDATION}" >> $GITHUB_ENV

          fi

        else

          PACKAGE_VERSION=${{ inputs.PACKAGE_VERSION }}
          BUILD_PACKAGE_VERSION=${PACKAGE_VERSION}

        fi

        echo "BUILD_PACKAGE_VERSION=${BUILD_PACKAGE_VERSION}" >> $GITHUB_ENV

    - name:  Update Versions in elementor files
      shell: bash
      run: |
        if [ -z "${{ inputs.PACKAGE_VERSION }}" ]; then

          sed -i -E "s/Version: (.*?)/Version: ${{ env.BUILD_PACKAGE_VERSION }}/g" ./${{ env.REPOSITORY_NAME }}.php

          if [ "${{ env.REPOSITORY_NAME }}" == "elementor" ]; then

            sed -i -E "s/ELEMENTOR_VERSION', '(.*?)'/ELEMENTOR_VERSION', '${{ env.BUILD_PACKAGE_VERSION }}'/g" ./${{ env.REPOSITORY_NAME }}.php

          elif [ "${{ env.REPOSITORY_NAME }}" == "elementor-pro" ]; then

            sed -i -E "s/ELEMENTOR_PRO_VERSION', '(.*?)'/ELEMENTOR_PRO_VERSION', '${{ env.BUILD_PACKAGE_VERSION }}'/g" ./${{ env.REPOSITORY_NAME }}.php
            sed -i -E "s/ELEMENTOR_PRO_REQUIRED_CORE_VERSION', '(.*?)'/ELEMENTOR_PRO_REQUIRED_CORE_VERSION', '${{ env.ELEMENTOR_VERSION_DEPENDENCY }}'/g" ./${{ env.REPOSITORY_NAME }}.php
            sed -i -E "s/ELEMENTOR_PRO_RECOMMENDED_CORE_VERSION', '(.*?)'/ELEMENTOR_PRO_RECOMMENDED_CORE_VERSION', '${{ env.ELEMENTOR_VERSION_RECOMMENDATION }}'/g" ./${{ env.REPOSITORY_NAME }}.php

          fi

        fi

    - name: Build Plugin
      id: build_plugin
      shell: bash
      run: |
        npm config set git-tag-version false
        export PUPPETEER_SKIP_DOWNLOAD=true

        npx grunt build

        if [ "${{ env.REPOSITORY_NAME }}" == "elementor" ]; then

          PLUGIN_FILENAME=elementor-${{ env.BUILD_PACKAGE_VERSION }}
          PLUGIN_ZIP_FILENAME=${PLUGIN_FILENAME}.zip

          mv build elementor
          zip -r ${PLUGIN_ZIP_FILENAME} elementor

        elif [ "${{ env.REPOSITORY_NAME }}" == "elementor-pro" ]; then

          PLUGIN_FILENAME="elementor-pro-${{ env.BUILD_PACKAGE_VERSION }}"
          PLUGIN_ZIP_FILENAME="${PLUGIN_FILENAME}.zip"

          PACKAGE_BASE_DIR="/tmp/elementor-pro-releases/"
          PACKAGE_PATH=$(ls $PACKAGE_BASE_DIR)
          PLUGIN_ZIP_PATH=$(pwd)/${PLUGIN_ZIP_FILENAME}

      # When the 'npx grunt build' is done running in PRO it creates a zip build file in
      # /tmp/elementor-pro-releases folder named elementor-pro-{PACKAGE_VERSION}.zip
      # So we move the zip generated to the root folder of the repository
          mv "${PACKAGE_BASE_DIR}/${PACKAGE_PATH}" ${PLUGIN_ZIP_FILENAME}

      # Unzip the zip file in the root folder into the /tmp folder
          unzip -q ${PLUGIN_ZIP_PATH} -d /tmp/
      # Remove the zip file from the root folder
          rm ${PLUGIN_ZIP_PATH}

          cd /tmp/
          zip -r -q ${PLUGIN_ZIP_PATH} ./elementor-pro

          echo "PLUGIN_ZIP_FILENAME=${PLUGIN_ZIP_FILENAME}" >> $GITHUB_ENV
          echo "PLUGIN_ZIP_PATH=${PLUGIN_ZIP_PATH}" >> $GITHUB_ENV
        fi

        echo "PLUGIN_FILENAME=${PLUGIN_FILENAME}" >> $GITHUB_OUTPUT

    - name: Build Core Plugin for Pro
      if: env.REPOSITORY_NAME == 'elementor-pro'
      shell: bash
      run: |
        ELEMENTOR_CORE_BRANCH="${{ inputs.ELEMENTOR_PRO_CORE_BRANCH }}"
        ROOT_DIR=$(pwd)

        rm -rf ../elementor
        echo "Cloning ELEMENTOR_CORE_BRANCH: ${ELEMENTOR_CORE_BRANCH}"

      # Cloning the core plugin into the elementor folder outside elementor-pro folder
        git clone --single-branch --branch ${ELEMENTOR_CORE_BRANCH} https://github.com/elementor/elementor.git ../elementor

      # Navigate to elementor folder
        cd ../elementor

      # Run installation of npm and composer dependencies for core plugin
        npm ci
        composer install --optimize-autoloader --prefer-dist
        composer install --no-scripts --no-dev
        composer dump-autoload

      # Build the core plugin
      # When the 'npx grunt build' is done running it creates a build folder in the elementor folder
      # and in the /tmp/elementor-builds. These builds are the same 203.161.54.121
        npx grunt build

        CORE_PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "CORE_PACKAGE_VERSION=${CORE_PACKAGE_VERSION}" >> $GITHUB_ENV

        cd $ROOT_DIR

        zip -r elementor.zip /tmp/elementor-builds/${{ env.CORE_PACKAGE_VERSION }}
        mv /tmp/elementor-builds/elementor.zip ./elementor.zip

    - name: Publish zip on push to release or develop
      shell: bash
      if: env.REPOSITORY_NAME == 'elementor-pro' && github.event_name == 'push' && startsWith(github.repository, 'elementor/') && (startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/develop')
      run: curl --fail -F "package=@${{ env.PLUGIN_ZIP_FILENAME }}" "${{ inputs.DEPLOY_BUILDS_ENDPOINT }}&type=pro"

    - name: Upload Build Zip Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build_plugin.outputs.PLUGIN_FILENAME }}
        path: ${{ env.REPOSITORY_NAME }}
        retention-days: 1
