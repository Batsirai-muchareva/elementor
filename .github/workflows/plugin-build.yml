name: Reusable Build workflow

on:
  workflow_call:
    inputs:
      PACKAGE_VERSION:
        required: false
        type: string
        description: 'Optional. The version of the package to use.'
        default: ""
      PACKAGE_FILES_VERSION:
        required: false
        type: string
        default: ""
      ELEMENTOR_PRO_CORE_BRANCH:
        required: false
        type: string
        description: 'The branch of the core repository to use.'
        default: "main"
      IS_CORE_PRO:
        required: false
        type: boolean
        description: 'Whether the core plugin is being built for Pro.'
        default: false

    secrets:
      DEPLOY_BUILDS_ENDPOINT:
        required: false
        description: 'The endpoint to deploy the builds to.'

    outputs:
      artifact_name:
        description: "The name of the generated zip file."
        value: ${{ jobs.plugin_build.outputs.artifact_name }}

jobs:
  plugin_build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ env.PLUGIN_FILENAME }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Install Dependencies for the main repository
        uses: Batsirai-muchareva/elementor/.github/workflows/dependencies-installation@main

      - name: Set GitHub Repository Name Environment Variable
        shell: bash
        run: |
          ls -al
          REPOSITORY_NAME=$(echo "${{ github.repository }}" | awk -F/ '{print $NF}')

          echo "REPOSITORY_NAME=${REPOSITORY_NAME}" >> $GITHUB_ENV

      - name: Set Package Version Environment Variable
        run: |
          # Determine PACKAGE_VERSION
          if [ -z "${{ inputs.PACKAGE_VERSION }}" ]; then

            DATE_VERSION=$(date '+%Y%m%d.%H%M')
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            BUILD_PACKAGE_VERSION=${PACKAGE_VERSION}-${DATE_VERSION}

          else

            BUILD_PACKAGE_VERSION=${{ inputs.PACKAGE_VERSION }}

          fi

          echo "BUILD_PACKAGE_VERSION=${BUILD_PACKAGE_VERSION}" >> $GITHUB_ENV

      - name:  Update Versions in elementor files
        run: |
          PACKAGE_FILES_VERSION=${{ inputs.PACKAGE_FILES_VERSION || env.BUILD_PACKAGE_VERSION }}

          sed -i -E "s/Version: (.*?)/Version: ${PACKAGE_FILES_VERSION}/g" ./${{ env.REPOSITORY_NAME }}.php

          case "${{ env.REPOSITORY_NAME }}" in
            "elementor")
              # Update Elementor version

              sed -i -E "s/ELEMENTOR_VERSION', '(.*?)'/ELEMENTOR_VERSION', '${PACKAGE_FILES_VERSION}'/g" ./${{ env.REPOSITORY_NAME }}.php

              ;;

            "elementor-pro")

              sed -i -E "s/ELEMENTOR_PRO_VERSION', '(.*?)'/ELEMENTOR_PRO_VERSION', '${PACKAGE_FILES_VERSION}'/g" ./${{ env.REPOSITORY_NAME }}.php

              ;;
            *)

              echo "Unknown repository name: ${REPOSITORY_NAME}"
              exit 1

              ;;
          esac


      - name: Clone Elementor Core
        if: ${{ inputs.IS_CORE_PRO == true }}
        run: |
          rm -rf ../elementor
          echo "Cloning ELEMENTOR_CORE_BRANCH: ${ELEMENTOR_CORE_BRANCH}"

          # Cloning the core plugin into the elementor folder outside elementor-pro folder
          git clone --single-branch --branch ${ELEMENTOR_CORE_BRANCH} https://github.com/elementor/elementor.git ../elementor

          # Navigate to elementor folder
          cd ../elementor

      - name: Build Core Plugin for Pro
        if: env.REPOSITORY_NAME == 'elementor-pro'
        run: |
          ELEMENTOR_CORE_BRANCH="${{ inputs.ELEMENTOR_PRO_CORE_BRANCH }}"
          ROOT_DIR=$(pwd)

          # Run installation of npm and composer dependencies for core plugin
          npm ci
          composer install --optimize-autoloader --prefer-dist
          composer install --no-scripts --no-dev
          composer dump-autoload

          # Build the core plugin
          # When the 'npx grunt build' is done running it creates a build folder in the elementor folder
          # and in the /tmp/elementor-builds. These builds are the same
          npx grunt build

          CORE_PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "CORE_PACKAGE_VERSION=${CORE_PACKAGE_VERSION}" >> $GITHUB_ENV

          cd /tmp/elementor-builds/
          mv ./${CORE_PACKAGE_VERSION} ./elementor
          zip -r elementor.zip ./elementor

          cd $ROOT_DIR

          mv /tmp/elementor-builds/elementor.zip ./elementor.zip

      - name: Build Plugin
        id: build_plugin
        run: |
          npm config set git-tag-version false
          export PUPPETEER_SKIP_DOWNLOAD=true

          npx grunt build

      - name: Zip Elementor Build Files
        id: zip_elementor
        if: ${{ env.REPOSITORY_NAME == 'elementor' }}
        run: |
          PLUGIN_FILENAME=elementor-${{ env.BUILD_PACKAGE_VERSION }}
          PLUGIN_ZIP_FILENAME=${PLUGIN_FILENAME}.zip

          mv build elementor
          zip -r ${PLUGIN_ZIP_FILENAME} elementor

          echo "PLUGIN_FILENAME=${PLUGIN_FILENAME}" >> $GITHUB_ENV

      - name: Zip Elementor Pro Build Files
        id: zip_elementor_pro
        if: ${{ env.REPOSITORY_NAME == 'elementor-pro' }}
        run: |
          ROOT_DIR=$(pwd)
          PLUGIN_FILENAME="elementor-pro-${{ env.BUILD_PACKAGE_VERSION }}"
          PLUGIN_ZIP_FILENAME="${PLUGIN_FILENAME}.zip"

          PACKAGE_BASE_DIR="/tmp/elementor-pro-releases/"
          PACKAGE_PATH=$(ls $PACKAGE_BASE_DIR)
          PLUGIN_ZIP_PATH=$(pwd)/${PLUGIN_ZIP_FILENAME}

          # When the 'npx grunt build' is done running in PRO it creates a zip build file in
          # /tmp/elementor-pro-releases folder named elementor-pro-{PACKAGE_VERSION}.zip
          # So we move the zip generated to the root folder of the repository
          mv "${PACKAGE_BASE_DIR}/${PACKAGE_PATH}" ${PLUGIN_ZIP_FILENAME}

          # Unzip the zip file in the root folder into the /tmp folder
          unzip -q ${PLUGIN_ZIP_PATH} -d /tmp/

          # Remove the zip file from the root folder
          rm ${PLUGIN_ZIP_PATH}

          cd /tmp/
          zip -r -q ${PLUGIN_ZIP_PATH} ./elementor-pro
          cd $ROOT_DIR

          unzip -qo ${PLUGIN_ZIP_PATH} -d ./elementor-pro

          echo "PLUGIN_ZIP_FILENAME=${PLUGIN_ZIP_FILENAME}" >> $GITHUB_ENV
          echo "PLUGIN_FILENAME=${PLUGIN_FILENAME}" >> $GITHUB_ENV

      - name: Publish zip on push to release or develop
        shell: bash
        if: env.REPOSITORY_NAME == 'elementor-pro' && github.event_name == 'push' && startsWith(github.repository, 'elementor/') && (startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/develop')
        run: curl --fail -F "package=@${{ env.PLUGIN_ZIP_FILENAME }}" "${{ secrets.DEPLOY_BUILDS_ENDPOINT }}&type=pro"

      - name: Upload Build Zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLUGIN_FILENAME }}
          path: ${{ env.REPOSITORY_NAME }}
          retention-days: 1
